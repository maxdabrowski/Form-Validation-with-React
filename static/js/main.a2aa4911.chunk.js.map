{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","username","email","pass","accept","errors","messages","username_incorrect","email_incorrect","password_incorrect","accept_incorrect","handleChange","e","name","target","type","value","_this","setState","Object","defineProperty","checked","handleSubmit","preventDefault","validation","formValidation","correct","message","password","regUsername","RegExp","regEmail","test","length","_this2","this","setTimeout","react_default","a","createElement","className","onSubmit","noValidate","htmlFor","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2aa4911.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    pass: \"\",\n    accept: false,\n\n    errors: {\n      username: false,\n      email: false,\n      pass: false,\n      accept: false\n    }\n  };\n\n  messages = {\n    username_incorrect: \"Nazwa użytkownika musi zaczynać sięz dużej litery \",\n    email_incorrect: \"podaj poprawny email\",\n    password_incorrect: \"hasło musi mieć przynajmniej 8 znaków\",\n    accept_incorrect: \"Musisz zaakceptowac regulamin\"\n  };\n\n  handleChange = e => {\n    const name = e.target.name;\n    const type = e.target.type;\n    if (type === \"text\" || type === \"password\" || type === \"email\") {\n      const value = e.target.value;\n      this.setState({\n        [name]: value\n      });\n    } else if (type === \"checkbox\") {\n      const accept = e.target.checked;\n      this.setState({\n        [name]: accept\n      });\n    }\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const validation = this.formValidation();\n    if (validation.correct) {\n      this.setState({\n        username: \"\",\n        email: \"\",\n        pass: \"\",\n        accept: false,\n        message: \"Formularz został wysłany\",\n        errors: {\n          username: false,\n          email: false,\n          pass: false,\n          accept: false\n        }\n      });\n    } else {\n      this.setState({\n        errors: {\n          username: !validation.username,\n          email: !validation.email,\n          pass: !validation.password,\n          accept: !validation.accept\n        }\n      });\n    }\n  };\n\n  formValidation = () => {\n    let username = false;\n    let email = false;\n    let password = false;\n    let accept = false;\n    let correct = false;\n\n    const regUsername = new RegExp(\"[A-ZĄĆŃÓŚŻŹ]\");\n    const regEmail = new RegExp(\"[^@s]+@[^@s]+.[^@s]+\");\n\n    if (regUsername.test(this.state.username)) {\n      username = true;\n    }\n    if (regEmail.test(this.state.email)) {\n      email = true;\n    }\n    if (this.state.pass.length >= 8) {\n      password = true;\n    }\n    if (this.state.accept) {\n      accept = true;\n    }\n    if (username && email && password && accept) {\n      correct = true;\n    }\n    return {\n      username,\n      email,\n      password,\n      accept,\n      correct\n    };\n  };\n\n  componentDidUpdate() {\n    if (this.state.message !== \"\") {\n      setTimeout(\n        () =>\n          this.setState({\n            message: \"\"\n          }) === \"\",\n        3000\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit} noValidate className=\"form\">\n          <label htmlFor=\"user\">\n            <span>Nazwa użytkownika:</span>\n            <input\n              type=\"text\"\n              id=\"user\"\n              name=\"username\"\n              value={this.state.username}\n              onChange={this.handleChange}\n            />\n            {this.state.errors.username && (\n              <p>{this.messages.username_incorrect}</p>\n            )}\n          </label>\n          <label htmlFor=\"email\">\n            <span>email: </span>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n            {this.state.errors.email && <p>{this.messages.email_incorrect}</p>}\n          </label>\n          <label htmlFor=\"password\">\n            <span>hasło:</span>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"pass\"\n              value={this.state.pass}\n              onChange={this.handleChange}\n            />\n            {this.state.errors.pass && (\n              <p>{this.messages.password_incorrect}</p>\n            )}\n          </label>\n          <label htmlFor=\"accept\">\n            <input\n              type=\"checkbox\"\n              id=\"accept\"\n              name=\"accept\"\n              checked={this.state.accept}\n              onChange={this.handleChange}\n            />{\" \"}\n            <p className=\"checkboxText\">Akceptuję regulamin</p>\n            {this.state.errors.accept && (\n              <p>{this.messages.accept_incorrect}</p>\n            )}\n          </label>\n          <button>Zarejestruj się</button>\n        </form>\n        {this.state.message && <h3>{this.state.message}</h3>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}